
.. _program_listing_file_.._canopen_base_driver_include_canopen_base_driver_canopen_base_driver.hpp:

Program Listing for File canopen_base_driver.hpp
================================================

|exhale_lsh| :ref:`Return to documentation for file <file_.._canopen_base_driver_include_canopen_base_driver_canopen_base_driver.hpp>` (``../canopen_base_driver/include/canopen_base_driver/canopen_base_driver.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //    Copyright 2022 Christoph Hellmann Santos
   //
   //    Licensed under the Apache License, Version 2.0 (the "License");
   //    you may not use this file except in compliance with the License.
   //    You may obtain a copy of the License at
   //
   //        http://www.apache.org/licenses/LICENSE-2.0
   //
   //    Unless required by applicable law or agreed to in writing, software
   //    distributed under the License is distributed on an "AS IS" BASIS,
   //    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   //    See the License for the specific language governing permissions and
   //    limitations under the License.
   #ifndef CANOPEN_BASE_DRIVER__CANOPEN_BASE_DRIVER_HPP_
   #define CANOPEN_BASE_DRIVER__CANOPEN_BASE_DRIVER_HPP_
   #include <memory>
   
   #include "canopen_base_driver/visibility_control.h"
   #include "rclcpp/rclcpp.hpp"
   #include "rclcpp/publisher.hpp"
   #include "std_msgs/msg/string.hpp"
   #include "std_srvs/srv/trigger.hpp"
   
   #include "canopen_base_driver/lely_bridge.hpp"
   #include "canopen_core/device.hpp"
   #include "canopen_interfaces/msg/co_data.hpp"
   #include "canopen_interfaces/srv/co_read.hpp"
   #include "canopen_interfaces/srv/co_write.hpp"
   
   namespace ros2_canopen
   {
     class BaseDriver : public DriverInterface
     {
     private:
       std::future<void> nmt_state_publisher_future;
       std::future<void> rpdo_publisher_future;
   
       void nmt_listener();
       void rdpo_listener();
   
     protected:
       std::shared_ptr<ros2_canopen::LelyBridge> driver;
   
       virtual void on_nmt(canopen::NmtState nmt_state)
       {
         RCLCPP_INFO(this->get_logger(), "New NMT state %d", (int)nmt_state);
       }
   
       virtual void on_rpdo(COData data)
       {
         RCLCPP_INFO(
             this->get_logger(),
             "Received PDO index %hu subindex %hhu data %u",
             data.index_,
             data.subindex_,
             data.data_);
       }
   
       explicit BaseDriver(
           const rclcpp::NodeOptions &options)
           : DriverInterface("base_driver", options) {}
   
     public:
       void init(
           ev::Executor &exec,
           canopen::AsyncMaster &master,
           uint8_t node_id) noexcept override;
       void remove(
         ev::Executor &exec,
         canopen::AsyncMaster &master,
         uint8_t node_id) noexcept override;
     };
   } // namespace ros2_canopen
   
   #endif // CANOPEN_BASE_DRIVER__CANOPEN_BASE_DRIVER_HPP_
